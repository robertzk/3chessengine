// Generated by CoffeeScript 1.7.1
(function() {
  var Pawn, Piece,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Piece = require('./piece');

  Pawn = (function(_super) {
    __extends(Pawn, _super);

    function Pawn(opts) {
      Pawn.__super__.constructor.apply(this, arguments);
      this.type = 'pawn';
      this.initialize_unmoved();
      this.initialize_direction();
    }


    /*
     * With pawns, we must be careful about the direction in which
     * they move forward. For example, if a pawn crosses the inner circle
     * it is moving "backward" in relation to the pawns that started on that
     * side, which are moving forward.
     *
     * To record this moving direction, we simply maintain the convention that
     * @towards_center = true implies the pawn is moving toward the center, and
     * @towards_center = false implies the pawn is moving away from the center.
     *
     * A pawn changes direction if and only if it crosses the center circle.
     */

    Pawn.prototype.initialize_direction = function() {
      return this.towards_center = true;
    };


    /*
     * If a pawn has moved, it can no longer skip 2 spaces nor capture en passent.
     * We must record this somehow, simply as a boolean flag.
     */

    Pawn.prototype.initialize_unmoved = function() {
      return this.unmoved = true;
    };


    /*
     * List the moves available to a pawn (in an array of [x, y] positions).
     *
     * Recall that it can capture to the sideways left and right, but only move
     * forward. Adjacent to the center, the pawn can cross the center, or 
     * capture along the same diagonal a bishop would be able to.
     */

    Pawn.prototype.moves = function() {};

    return Pawn;

  })(Piece);

  module.exports = Pawn;

}).call(this);
